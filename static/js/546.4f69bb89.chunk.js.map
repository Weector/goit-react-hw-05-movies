{"version":3,"file":"static/js/546.4f69bb89.chunk.js","mappings":"6SAEMA,EAAU,2CACHC,EAAW,gCAEjB,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,EAAAA,GAAAA,IAAA,UACbF,EADa,8BACiBD,IACrCI,MAAK,SAAAC,GAAI,OAAIA,CAAJ,IAHP,cACCC,EADD,yBAKEA,EAASC,MALX,kEAQA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA0BC,GAA1B,uFACkBN,EAAAA,GAAAA,IAAA,UACbF,EADa,iBACIQ,EADJ,YACUT,EADV,oBAEpBI,MAAK,SAAAC,GAAI,OAAIA,CAAJ,IAHP,cACCC,EADD,yBAKEA,EAASC,MALX,kEAQA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA0BD,GAA1B,uFACkBN,EAAAA,GAAAA,IAAA,UACbF,EADa,iBACIQ,EADJ,oBACkBT,EADlB,oBAEpBI,MAAK,SAAAC,GAAI,OAAIA,CAAJ,IAHP,cACCC,EADD,yBAKEA,EAASC,MALX,kEAQA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA6BF,GAA7B,uFACkBN,EAAAA,GAAAA,IAAA,UACbF,EADa,iBACIQ,EADJ,oBACkBT,EADlB,2BAEpBI,MAAK,SAAAC,GAAI,OAAIA,CAAJ,IAHP,cACCC,EADD,yBAKEA,EAASC,MALX,kEAQA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,uFACkBV,EAAAA,GAAAA,IAAA,UAEhBF,EAFgB,wBAEQD,EAFR,iCAEwCa,EAFxC,gCAIpBT,MAAK,SAAAC,GAAI,OAAIA,CAAJ,IALP,cACCC,EADD,yBAOEA,EAASC,MAPX,kE,6ICnCMO,EAAOC,EAAAA,GAAAA,GAAH,+MAYJC,EAAOD,EAAAA,GAAAA,GAAH,gEAKJE,EAAMF,EAAAA,GAAAA,IAAH,2DAKHG,EAAQH,EAAAA,GAAAA,IAAH,mE,SCsBlB,EAvCa,WAAO,IAAD,IACjB,GAA4BI,EAAAA,EAAAA,UAAS,CAAC,GAAtC,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAASC,EAAAA,EAAAA,MAMf,OAJAC,EAAAA,EAAAA,YAAU,YACRd,EAAAA,EAAAA,IAAWY,EAAOG,SAASrB,KAAKiB,EACjC,GAAE,CAACC,KAGF,yBACG,OAACF,QAAD,IAACA,GAAD,UAACA,EAAQM,YAAT,OAAC,EAAcC,QAGd,SAACb,EAAD,UACIM,EAAOM,KAAR,OAGCN,QAHD,IAGCA,GAHD,UAGCA,EAAQM,YAHT,aAGC,EAAcE,KAAI,gBAAGnB,EAAH,EAAGA,GAAIoB,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OAChB,UAACf,EAAD,YACE,SAACC,EAAD,CACEe,IACEH,EAAY,6CAC8BA,GACtCI,EAENC,IAAKJ,EACLK,MAAM,MACNC,OAAO,SAET,wBAAKN,KACL,uCAAeC,OAZNtB,EADK,KAFlB,gDAJJ,SAACS,EAAD,uCA2BP,C","sources":["components/API/moviesFetch.js","components/Cast/cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'api_key=936bad92f4a27fe8a667506dd7861007';\nexport const BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport async function moviesTrends() {\n  const response = await axios\n    .get(`${BASE_URL}trending/movie/day?${API_KEY}`)\n    .then(resp => resp);\n\n  return response.data;\n}\n\nexport async function moviesInfo(id) {\n  const response = await axios\n    .get(`${BASE_URL}movie/${id}?${API_KEY}&language=en-US`)\n    .then(resp => resp);\n\n  return response.data;\n}\n\nexport async function moviesCast(id) {\n  const response = await axios\n    .get(`${BASE_URL}movie/${id}/credits?${API_KEY}&language=en-US`)\n    .then(resp => resp);\n\n  return response.data;\n}\n\nexport async function moviesReviews(id) {\n  const response = await axios\n    .get(`${BASE_URL}movie/${id}/reviews?${API_KEY}&language=en-US&page=1`)\n    .then(resp => resp);\n\n  return response.data;\n}\n\nexport async function moviesSearch(query) {\n  const response = await axios\n    .get(\n      `${BASE_URL}search/movie?${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    )\n    .then(resp => resp);\n\n  return response.data;\n}\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 45px;\n  justify-content: center;\n  max-width: 1600px;\n  list-style: none;\n  padding: 0;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Item = styled.li`\n  width: 180px;\n  text-align: center;\n`;\n\nexport const Img = styled.img`\n  display: block;\n  width: 100%;\n`;\n\nexport const Alert = styled.div`\n  margin-top: 15px;\n  margin-left: 60px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport avatar from 'components/pictures/avatarPlaceholder.png';\nimport { moviesCast } from 'components/API/moviesFetch';\nimport { Img, Item, List, Alert } from './cast.styled';\n\nconst Cast = () => {\n  const [actors, setActors] = useState({});\n  const params = useParams();\n\n  useEffect(() => {\n    moviesCast(params.movieId).then(setActors);\n  }, [params]);\n\n  return (\n    <div>\n      {!actors?.cast?.length ? (\n        <Alert>Oooops, no actors found</Alert>\n      ) : (\n        <List>\n          {!actors.cast ? (\n            <div>Not find actors</div>\n          ) : (\n            actors?.cast?.map(({ id, profile_path, name, character }) => (\n              <Item key={id}>\n                <Img\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/original${profile_path}`\n                      : avatar\n                  }\n                  alt={name}\n                  width=\"180\"\n                  height=\"240\"\n                />\n                <h2>{name}</h2>\n                <p>Character: {character}</p>\n              </Item>\n            ))\n          )}\n        </List>\n      )}\n    </div>\n  );\n};\nexport default Cast;\n"],"names":["API_KEY","BASE_URL","moviesTrends","axios","then","resp","response","data","moviesInfo","id","moviesCast","moviesReviews","moviesSearch","query","List","styled","Item","Img","Alert","useState","actors","setActors","params","useParams","useEffect","movieId","cast","length","map","profile_path","name","character","src","avatar","alt","width","height"],"sourceRoot":""}